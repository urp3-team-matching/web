generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Project {
  id              Int           @id @default(autoincrement())
  name            String
  viewCount       Int           @default(0)
  background      String
  method          String
  objective       String
  result          String
  etc             String?
  attachments     String[]
  keywords        String[]
  proposerName    String
  proposerType    ProposerType
  proposerMajor   String?
  email           String
  chatLink        String?
  status          ProjectStatus @default(RECRUITING)
  passwordHash    String        @map("password")
  createdDatetime DateTime      @default(now()) @db.Timestamptz(6)
  updatedDatetime DateTime      @updatedAt @db.Timestamptz(6)
  applicants      Applicant[]
  messages        Message[]
}

model Applicant {
  id              Int             @id @default(autoincrement())
  name            String
  email           String
  major           String
  introduction    String
  status          ApplicantStatus @default(PENDING)
  createdDatetime DateTime        @default(now()) @db.Timestamptz(6)
  updatedDatetime DateTime        @updatedAt @db.Timestamptz(6)
  projectId       Int
  project         Project         @relation(fields: [projectId], references: [id])
}

model Post {
  id              Int      @id @default(autoincrement())
  title           String
  content         String
  attachments     String[]
  viewCount       Int      @default(0)
  createdDatetime DateTime @default(now()) @db.Timestamptz(6)
  updatedDatetime DateTime @updatedAt @db.Timestamptz(6)
}

model Message {
  id              BigInt   @id @default(autoincrement())
  content         String
  userId          String
  major           String
  nickname        String
  projectId       Int
  createdDatetime DateTime @default(now()) @db.Timestamptz(6)
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

enum ProposerType {
  PROFESSOR
  STUDENT
  HOST
}

enum ProjectStatus {
  RECRUITING
  CLOSED
}

enum ApplicantStatus {
  PENDING
  APPROVED
  REJECTED
}
